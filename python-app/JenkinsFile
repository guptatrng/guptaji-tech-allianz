pipeline {
    agent {
        label 'default'
    }

    environment {
        DOCKERHUB_USER = "guptatrng"
        APP_NAME = "guptaji-tech-allianz"
    }

    stages {

        stage('Clone Repo') {
            steps {
                script {
                    echo "========== üì• START: Cloning Repository =========="
                    git url: 'https://github.com/guptatrng/guptaji-tech-allianz.git', branch: 'main'
                    echo "‚úÖ‚úÖ‚úÖ Repo cloned successfully!"
                }
            }
        }

        stage('Read Control file') {
            steps {
                script {
                    echo "========== üìÑ START: Reading Control File =========="
                    DEPLOY_TARGET = readFile('python-app/blue-green-control.txt').trim()
                    echo "‚úÖ Deploy target: ${DEPLOY_TARGET}"
                }
            }
        }

        stage('Install Dependencies') {
            steps {
                script {
                    echo "========== üêç START: Installing Python Dependencies =========="
                    sh """
                        cd python-app/${DEPLOY_TARGET}
                        python3 -m venv venv
                        . venv/bin/activate
                        pip install -r requirements.txt
                    """
                    echo "‚úÖ‚úÖ‚úÖ Dependencies installed!"
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    echo "========== üê≥ START: Building Docker Image =========="
                    COMMIT_ID = sh(returnStdout: true, script: 'git rev-parse --short HEAD').trim()
                    IMAGE_TAG = "${DOCKERHUB_USER}/${APP_NAME}-${DEPLOY_TARGET}:${COMMIT_ID}"

                    sh """
                        cd python-app/${DEPLOY_TARGET}
                        docker build -t ${IMAGE_TAG} .
                        docker images
                    """
                    echo "‚úÖ‚úÖ‚úÖ Docker image built: ${IMAGE_TAG}"
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-creds', usernameVariable: 'DOCKERHUB_USERNAME', passwordVariable: 'DOCKERHUB_PASSWORD')]) {
                    script {
                        echo "========== üì§ START: Pushing Docker Image =========="
                        sh """
                            echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
                            docker push ${IMAGE_TAG}
                        """
                        echo "‚úÖ‚úÖ‚úÖ Docker image pushed: ${IMAGE_TAG}"
                    }
                }
            }
        }

        stage('Update Deployment YAML with New Image') {
            steps {
                script {
                    echo "========== ‚úèÔ∏è START: Updating Deployment YAML =========="
                    sh """
                        cd python-app/${DEPLOY_TARGET}
                        sed -i 's|guptatrng/guptaji-tech-allianz-${DEPLOY_TARGET}:.*|${IMAGE_TAG}|g' deployment.yaml
                        echo "‚úÖ‚úÖ‚úÖ Updated deployment.yaml:"
                        cat deployment.yaml
                    """
                }
            }
        }

        stage('Authenticate with GCP and Get GKE Credentials') {
            steps {
                withCredentials([file(credentialsId: 'gcp-sa-key', variable: 'GOOGLE_APPLICATION_CREDENTIALS')]) {
                    script {
                        echo "========== üîë START: Authenticating with GCP =========="
                        sh '''
                            echo "Activating service account"
                            gcloud auth activate-service-account --key-file=$GOOGLE_APPLICATION_CREDENTIALS

                            echo "Setting GCP project"
                            gcloud config set project kubernetes-test-456013

                            echo "Getting GKE credentials"
                            gcloud container clusters get-credentials guptaji-tech-allianz-cluster --zone asia-south1-a --project kubernetes-test-456013
                        '''
                        echo "‚úÖ‚úÖ‚úÖ GCP authentication and cluster credentials retrieved"
                    }
                }   
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    echo "========== üöÄ START: Deploying to Kubernetes =========="
                    sh """
                        cd python-app/${DEPLOY_TARGET}
                        kubectl apply -f deployment.yaml
                        kubectl apply -f service.yaml
                    """
                    echo "‚úÖ‚úÖ‚úÖ Deployment and Service applied to Kubernetes!"
                }
            }
        }

    }
}